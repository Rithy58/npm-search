{"version":3,"sources":["logo.svg","state/slices/searchSlice.ts","services/npmApi.ts","state/index.ts","components/PackageSearch/index.tsx","components/PackageList/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["searchSlide","createSlice","name","initialState","loading","error","reducers","search","state","action","payload","success","npmApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","npmPackageSearch","query","transformResponse","rawResult","objects","map","el","package","useNpmPackageSearchQuery","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","actions","searchPackage","searchPackageSuccess","searchPackageError","useAppSelector","useSelector","useAppDispatch","useDispatch","PackageSearch","useState","setName","dispatch","onSubmit","event","preventDefault","value","onChange","e","target","PackageList","data","isError","isSuccess","isLoading","isFetching","JSON","stringify","length","packageData","description","App","className","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee2f5d94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ninterface searchState {\r\n    loading: boolean,\r\n    error: string | null,\r\n    name: string\r\n}\r\n\r\nconst initialSearchState: searchState = {\r\n    loading: false,\r\n    error: null,\r\n    name: ''\r\n}\r\n\r\nexport const searchSlide = createSlice({\r\n    name: 'search',\r\n    initialState: initialSearchState,\r\n    reducers: {\r\n        search: (state, action: PayloadAction<string>) => {\r\n            state.loading = true\r\n            state.error = null\r\n            state.name = action.payload\r\n        },\r\n        success: (state) => {\r\n            state.loading = false\r\n        },\r\n        error: (state, action: PayloadAction<string>) => {\r\n            state.loading = false\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\ninterface Package {\r\n    name: string\r\n    description: string\r\n}\r\n\r\ninterface Result {\r\n    objects: [{package: Package}]\r\n}\r\n\r\nexport const npmApi = createApi({\r\n    reducerPath: 'npmApi',\r\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://registry.npmjs.org/' }),\r\n    endpoints: (builder) => ({\r\n        npmPackageSearch: builder.query<Package[], string>({\r\n            query: (name: string) => `-/v1/search?text=${name}`,\r\n            transformResponse: (rawResult: Result) => {\r\n                return rawResult.objects.map(el => el.package)\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\nexport const { useNpmPackageSearchQuery } = npmApi\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { searchSlide } from './slices/searchSlice'\r\nimport { npmApi } from '../services/npmApi'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        search: searchSlide.reducer,\r\n        [npmApi.reducerPath]: npmApi.reducer\r\n    },\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(npmApi.middleware),\r\n})\r\n\r\nexport const { search: searchPackage, success: searchPackageSuccess, error: searchPackageError } = searchSlide.actions\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n","import React, { useState } from 'react'\r\nimport { useAppDispatch, searchPackage } from '../../state'\r\n\r\nconst PackageSearch = () => {\r\n    const [name, setName] = useState('')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault()\r\n        dispatch(searchPackage(name))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ onSubmit }>\r\n            <input value={ name } onChange={ (e) => setName(e.target.value) } />\r\n            <button>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PackageSearch\r\n","import React from 'react'\r\nimport { useNpmPackageSearchQuery } from '../../services/npmApi'\r\nimport { useAppDispatch, searchPackageError, searchPackageSuccess } from '../../state'\r\n\r\nconst PackageList = ({name} : {name: string}) => {\r\n    const { data, error, isError, isSuccess, isLoading, isFetching } = useNpmPackageSearchQuery(name)\r\n    const dispatch = useAppDispatch()\r\n\r\n    if(isError) {\r\n      dispatch(searchPackageError(JSON.stringify(error)))\r\n    }\r\n\r\n    if(isSuccess) {\r\n      dispatch(searchPackageSuccess())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          { isError ? (<>Oh no, there was an error! {JSON.stringify(error)}</>) :\r\n            isLoading ? (<>Loading...</>) :\r\n            data && data.length > 0 ?\r\n              data.map((packageData) => {\r\n                  return <>\r\n                    <h3>{packageData.name}</h3>\r\n                    <p>Description: {packageData.description}</p>\r\n                  </>\r\n              }) :\r\n            isFetching ? ( <>Fetching...</>) :\r\n            (<>No Data</>)\r\n          }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PackageList\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { RootState, useAppSelector } from './state';\r\nimport PackageSearch from './components/PackageSearch';\r\nimport PackageList from './components/PackageList';\r\n\r\nfunction App() {\r\n  const name = useAppSelector((state: RootState) => state.search.name)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <PackageSearch />\r\n        <PackageList name={name} />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './state'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}